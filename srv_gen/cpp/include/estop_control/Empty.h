/* Auto-generated by genmsg_cpp for file /home/underwater-haptics-3/ros_workspace/sandbox/estop_control/srv/Empty.srv */
#ifndef ESTOP_CONTROL_SERVICE_EMPTY_H
#define ESTOP_CONTROL_SERVICE_EMPTY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace estop_control
{
template <class ContainerAllocator>
struct EmptyRequest_ {
  typedef EmptyRequest_<ContainerAllocator> Type;

  EmptyRequest_()
  {
  }

  EmptyRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::estop_control::EmptyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estop_control::EmptyRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EmptyRequest
typedef  ::estop_control::EmptyRequest_<std::allocator<void> > EmptyRequest;

typedef boost::shared_ptr< ::estop_control::EmptyRequest> EmptyRequestPtr;
typedef boost::shared_ptr< ::estop_control::EmptyRequest const> EmptyRequestConstPtr;



template <class ContainerAllocator>
struct EmptyResponse_ {
  typedef EmptyResponse_<ContainerAllocator> Type;

  EmptyResponse_()
  {
  }

  EmptyResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::estop_control::EmptyResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estop_control::EmptyResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EmptyResponse
typedef  ::estop_control::EmptyResponse_<std::allocator<void> > EmptyResponse;

typedef boost::shared_ptr< ::estop_control::EmptyResponse> EmptyResponsePtr;
typedef boost::shared_ptr< ::estop_control::EmptyResponse const> EmptyResponseConstPtr;


struct Empty
{

typedef EmptyRequest Request;
typedef EmptyResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Empty
} // namespace estop_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estop_control::EmptyRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estop_control::EmptyRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estop_control::EmptyRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::estop_control::EmptyRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::estop_control::EmptyRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estop_control/EmptyRequest";
  }

  static const char* value(const  ::estop_control::EmptyRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estop_control::EmptyRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::estop_control::EmptyRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estop_control::EmptyRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estop_control::EmptyResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estop_control::EmptyResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estop_control::EmptyResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::estop_control::EmptyResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::estop_control::EmptyResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estop_control/EmptyResponse";
  }

  static const char* value(const  ::estop_control::EmptyResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estop_control::EmptyResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::estop_control::EmptyResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estop_control::EmptyResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estop_control::EmptyRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EmptyRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estop_control::EmptyResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EmptyResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<estop_control::Empty> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const estop_control::Empty&) { return value(); } 
};

template<>
struct DataType<estop_control::Empty> {
  static const char* value() 
  {
    return "estop_control/Empty";
  }

  static const char* value(const estop_control::Empty&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estop_control::EmptyRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const estop_control::EmptyRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estop_control::EmptyRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estop_control/Empty";
  }

  static const char* value(const estop_control::EmptyRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estop_control::EmptyResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const estop_control::EmptyResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estop_control::EmptyResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estop_control/Empty";
  }

  static const char* value(const estop_control::EmptyResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ESTOP_CONTROL_SERVICE_EMPTY_H

