/* Auto-generated by genmsg_cpp for file /home/pierre/Dropbox/uh/uh1/ros_ws/estop_control/srv/estopSignal.srv */
#ifndef ESTOP_CONTROL_SERVICE_ESTOPSIGNAL_H
#define ESTOP_CONTROL_SERVICE_ESTOPSIGNAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace estop_control
{
template <class ContainerAllocator>
struct estopSignalRequest_ {
  typedef estopSignalRequest_<ContainerAllocator> Type;

  estopSignalRequest_()
  : message(0)
  {
  }

  estopSignalRequest_(const ContainerAllocator& _alloc)
  : message(0)
  {
  }

  typedef int64_t _message_type;
  int64_t message;


  typedef boost::shared_ptr< ::estop_control::estopSignalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estop_control::estopSignalRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct estopSignalRequest
typedef  ::estop_control::estopSignalRequest_<std::allocator<void> > estopSignalRequest;

typedef boost::shared_ptr< ::estop_control::estopSignalRequest> estopSignalRequestPtr;
typedef boost::shared_ptr< ::estop_control::estopSignalRequest const> estopSignalRequestConstPtr;



template <class ContainerAllocator>
struct estopSignalResponse_ {
  typedef estopSignalResponse_<ContainerAllocator> Type;

  estopSignalResponse_()
  : handshake(false)
  {
  }

  estopSignalResponse_(const ContainerAllocator& _alloc)
  : handshake(false)
  {
  }

  typedef uint8_t _handshake_type;
  uint8_t handshake;


  typedef boost::shared_ptr< ::estop_control::estopSignalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estop_control::estopSignalResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct estopSignalResponse
typedef  ::estop_control::estopSignalResponse_<std::allocator<void> > estopSignalResponse;

typedef boost::shared_ptr< ::estop_control::estopSignalResponse> estopSignalResponsePtr;
typedef boost::shared_ptr< ::estop_control::estopSignalResponse const> estopSignalResponseConstPtr;


struct estopSignal
{

typedef estopSignalRequest Request;
typedef estopSignalResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct estopSignal
} // namespace estop_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estop_control::estopSignalRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estop_control::estopSignalRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estop_control::estopSignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9b8769cd592bd7dbe979986bd8cd4f43";
  }

  static const char* value(const  ::estop_control::estopSignalRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9b8769cd592bd7dbULL;
  static const uint64_t static_value2 = 0xe979986bd8cd4f43ULL;
};

template<class ContainerAllocator>
struct DataType< ::estop_control::estopSignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estop_control/estopSignalRequest";
  }

  static const char* value(const  ::estop_control::estopSignalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estop_control::estopSignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 message\n\
\n\
";
  }

  static const char* value(const  ::estop_control::estopSignalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estop_control::estopSignalRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::estop_control::estopSignalResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::estop_control::estopSignalResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::estop_control::estopSignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fc4338d16376d32eeaaceec172df4b81";
  }

  static const char* value(const  ::estop_control::estopSignalResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfc4338d16376d32eULL;
  static const uint64_t static_value2 = 0xeaaceec172df4b81ULL;
};

template<class ContainerAllocator>
struct DataType< ::estop_control::estopSignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estop_control/estopSignalResponse";
  }

  static const char* value(const  ::estop_control::estopSignalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::estop_control::estopSignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool handshake\n\
\n\
\n\
";
  }

  static const char* value(const  ::estop_control::estopSignalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::estop_control::estopSignalResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estop_control::estopSignalRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.message);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct estopSignalRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::estop_control::estopSignalResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.handshake);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct estopSignalResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<estop_control::estopSignal> {
  static const char* value() 
  {
    return "dc74918662e89850de7ce1fe46ff82c2";
  }

  static const char* value(const estop_control::estopSignal&) { return value(); } 
};

template<>
struct DataType<estop_control::estopSignal> {
  static const char* value() 
  {
    return "estop_control/estopSignal";
  }

  static const char* value(const estop_control::estopSignal&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estop_control::estopSignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dc74918662e89850de7ce1fe46ff82c2";
  }

  static const char* value(const estop_control::estopSignalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estop_control::estopSignalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estop_control/estopSignal";
  }

  static const char* value(const estop_control::estopSignalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<estop_control::estopSignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dc74918662e89850de7ce1fe46ff82c2";
  }

  static const char* value(const estop_control::estopSignalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<estop_control::estopSignalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "estop_control/estopSignal";
  }

  static const char* value(const estop_control::estopSignalResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ESTOP_CONTROL_SERVICE_ESTOPSIGNAL_H

